git 版本控制工具


merge 美 [mɜrdʒ]  使(混合,融入)
recursive  递归,回归

1.Git的作用:
	源代码管理(版本控制)

	原理:内含微型数据库!

	为什么要进行源代码管理?

		1.文件版本控制，对每个文件的增、删、改进行记录和备份
		2.协同开发，在项目中对每个开发者对项目文件的增、删、改进行记录和	备份，协调每个人的开发。
		3.项目管理，跟踪每个人的开发进度及项目整体进度


	Git的特点：

		1.版本控制：可以解决多人同时开发的代码问题，也可以解决找回历史代码的问题
		2.分布式：Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。首先找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。可以自己搭建这台服务器，也可以使用GitHub网站


2.git工作流程

	git管理文件的步骤如下:


	2.1工作区:
		用户的某个用git管理的文件夹属于工作区，用户对文件的增加、修改、删除在工作区完成

	2.2暂存区
		临时存储用户对文件的增加、修改、删除的记录，记录信息存储在工作区文件夹中的.git文件夹中

	2.3仓库区
		用户对文件的确认的增、删、改的记录信息，存在仓库区，记录信息也存储在工作区文件夹中的.git文件夹中

	GitHub网站


	程序员A的文件夹: 工作区 + .git隐藏文件夹(内含暂存区和仓库区)


3.git本地文件管理

	3.1安装git:
		sudo apt-get install git

		安装完成后执行git命令,会显示git命令相关参数：
			git	

	3.2创建git管理文件夹	
		创建一个git_test文件夹，在该文件夹目录下执行如下命令，目录中会生成一个.git隐藏文件夹，这个文件夹就是针对git_test文件夹的版本库目录。

		git init
		(执行完了之后就新建了一个工作区,会生成一个隐藏文件.git)

	3.3版本创建查看状态	

		1、在git_test文件夹中创建一个code.txt文件，在code.txt中添加一行文本 

		2、使用git命令查看当前的状态
			git status

		3、使用git add命令，将此文件加入暂存区:
			git add code.txt	

		4、再查看当前的状态 git status

		5、使用git commit命令，将文件加入仓库区，此时可以创建文件的一个版本
			git commit -m '版本1'

		6、再查看当前的状态 :git status	


		注:git commit -m '版本X:描述'这个非常重要!

	3.4查看历史及版本回退	

		1、使用git log查看版本记录
			git log

		2、在code.txt文件中再添加一行，然后使用之前的命令再创建一个版本 		:版本2	版本1

		3、想退回到某个版本，可以使用如下命令：
			git reset --hard HEAD^

			其中HEAD表示当前最新版本，
			HEAD^表示当前版本的前一个版本,
			HEAD^^表示当前版本的前前个版本，
			也可以使用HEAD~1表示当前版本的前一个版本,
			HEAD~100表示当前版本的前100版本。 如果想回到版本1，可以使用如下命令：
				1.git reset --hard HEAD^
				2.git log
				3.查看:cat code.txt

				执行命令后使用git log查看版本记录，发现现在只能看到版本1的记录，cat code.txt查看文件内容，发现现在只有一行，也就是第一个版本中code.txt的内容。

		4、假如我们现在又想回到版本2，这个时候怎么办？可以使用如下命令：
			git reset --hard 版本号	

				4.1从上面的文本信息中可以看到版本2的版本号为如下： 
						29ac99a8b59d.....
				4.2	这时，只需要复制一部分版本号就可以了，执行下面的命令：		git reset --hard 29ac99a
				4.3现在发现版本2又回来了。可以cat code.txt查看其里面的内容如下：

		5、如果再回退到版本1，关掉终端，再打开，这个时候看不到版本2的版本号，这个时候想回到版本2，该怎么办呢？这个时候可以执行如下命令查看每个操作记录：记录的前面是版本号：		

			git reflog		

			这个时候就可以看到版本号了，执行第7步的命令，就可以回到版本2了：git reset --hard 29ac99a



		注:版本是可以迭代的,后面的版本可以看到前面的版本!

	3.5管理修改
	
		git管理的文件的修改，它只会提交暂存区的修改来创建版本。

		1、在code.txt中增加一行，然后用git add命令提交到暂存区。
			1.1然后再到code.txt中增加一行。
			1.2.接着直接用git commit命令提交到仓库区，然后用git status命令来查看当前状态，发现code.txt文件还有修改未提交，也就是第二次修改的没有提交。 

		2.2、如果想撤销第二次工作区的修改，可以使用如下命令：
			git checkout -- <文件>	

			接着使用git status命令查看状态，发现工作区干净了，没有提交，也就是文件回到了第一次修改的状态 
				git status 然后 cat code.txt

		3、如果修改的内容加入到暂存区，应该如何修改呢？接下来再增加一行，然后用git add命名加入到暂存区。		

			3.1git中的提示告诉我们，可以使用如下命令，将暂存区的修改撤销掉，重新放回工作区
				git reset HEAD <文件>

			3.2接着如果想放弃工作区的修改，可以使用第2部的命令，撤销工作区文件的修改 	
				git checkout -- code.txt
				git status

		4.5、如果修改的内容加入到了暂存区，又加入到了仓库区，这个时候想撤销该怎么办呢？这个时候我们可以使用版本回退，回退到上一个版本。
			注:	到了仓库区就没办法修改或者撤回了,只能 git reset --hard HEAD^回到之前版本,
				放弃最新修改的这个版本,此时最新版本就是之前的版本,修改的版本已经消失了!但是如果想回去可以git reflog

	总结：

		场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令:
			git checkout -- file。

		场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
			第一步用命令:
				git reset HEAD file，就回到了工作区，
			第二步:
				git checkout -- <文件名>

		场景 3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节。
				git reset --hard HEAD^ 回到上个版本
				git reset --hard <版本号>(如果不是上个版本,而是好几个版本,那就用这种方法)


	总结: git log 和git reflog的区别:

		git log 是查看当前可用的版本
		git reflog 是查看之前有过的所有版本号,其中不仅可以看到commit的版本,
				还可以看到reset,checkout,merge的版本,其中版本前缀数字越小,表示版本越新			
				(git reflog 相当于超级回收站,记录所有操作版本)


	3.6 文件对比
		1、将code.txt文件中新增加一行，此时，如果想比较工作区文件和当前最新版本文件的差异，应该怎么做呢？可以执行如下命令：
			git diff HEAD -- <文件>


		2、如果想比较版本库中两个版本的不同，可以使用如下命令来比较：
			git diff HEAD HEAD^ -- <文件>	


		注: (现在以当前版本和 前一个版本做对比)
			1.可以看出，最新版本比前一个版本多个一行文字和一个空行
			2.---表示第一个code文件,版本库里的 对应下面的 -'内容'是版本库里的内容
			 +++表示是工作区的文件,对应的 +'内容' 是工作区独有的内容!
			 白色文字是两个版本都共有的!
			3.如果对比没有出结果,那就代表当前版本和对比目标版本没有不同


	思考:我现在有版本	3和版本 4,	版本四有添加东西,我现在回到版本三将版本三增加了一点东西
		然后调回版本四,将3和4 进行对比,结果???


	3.7删除文件
	
		1、如果要删除文件，可以直接在文件夹里面删除，直接删除文件只是反应在工作区的修改，如果想提交删除修改，需要先执行add再执行commit，而使用git命令删除，会将删除的修改信息直接存到暂存区，git删除命令为：
			1.	git rm <文件> (这么删,或者是物理删除,相当于执行了两步操作,1.删除工作区,2.提交删除信息到暂存区)

			2.如果想确认删除，可以提交删除修改到仓库区:
				git commit -m '版本6:删除  文件名'


		2、如果是删错了，在暂存区可以使用‘git reset HEAD <文件>...’命令，撤销文件的删除，如果已提交仓库区，可以使用版本回退回到删除之前的版本，如果想找回单个删除文件，可以使用‘git checkout <版本号> <文件名>’，将删除的找回到暂存区，再提交仓库区就可以了。	
			(调回到上一个版本)

		第二种删除:
			1.rm code2.txt(直接物理删除文件)

			2.git add code2.txt(提交删除信息到暂存区)

			3.git commit -m '版本6:删除' (提交删除信息到仓库区)

	注:删除可以理解为是一种修改,故删除的时候是要提交删除信息的!


4.git分支

	git分支的功能，可以实现文件按不同意向开发的功能，这样可以实现多人并行开发项目，也可以让个人管理文件的不同并行版本。


	4.1查看、创建及切换分支

		1、使用如下命令，可以查看当前分支列表，以及当前处在哪个分支上

			git branch

			当前显示，只有一个分支master，master前面的星号表示当前处在master分支上，master是git接管文件夹时，默认创建的分支，也叫作主分支，每次用git init命令初始化时，都会默认创建一个且只有一个master分支。

		2、使用如下命令，可以创建一个分支

			git branch <分支名>	


		3、使用如下命名，可以切换分支

			git checkout <分支名>	

			此时，切换到分支dev上

		4、创建加切换分支，可以一起完成，使用如下命令：

			git checkout -b <name>	

		5、在不同分支上有什么区别呢？此时，我们在dev分支上，首先修改code.txt，在它的文字上增加一行，然后再新创建一个文件code2.txt，接着将所有的修改提交到版本库。	

		此时，切换不同的分支，查看文件个数及内容，发现，在dev分支上做的任何修改(新增文件及修改文件内容)，在master分支上看不到，也就是说，分支上的修改是独立互不影响的。

		分支示意图:


		注: 1.*master 作为主分支,创建的dev 分支会把master中的code.txtcopy一份,
				修改dev中的code不会影响master,
			2.添加多个分支,选中哪个分支git checkout dev 那么就会显示*在哪个分支上(git branch查看所有分支)
				



	4.2合并及删除分支
	
		1、有时候，需要把分支上的工作合并到另外一个分支上，就要用到分支合并，我们可以用如下命令完成分支合并：

			git merge <分支名称>	
			此时，在master分支上，也可以看到dev分支上的修改

		2、分支合并完成后，可以删掉无用的分支，可以用如下的命令删除分支：

		git branch -d <分支名称>
			删除完成后，此时只剩下一个master分支了。

	注:	如果当前在 dev分支上,想删除dev分支是行不通的,必须要切换到其他分支取删除dev	


	4.3解决冲突
				
		不同的分支上，同一文件如果都更新了版本，在合并时就会产生冲突，这个时候需要手动解决冲突。

		1、创建一个分支dev，在此分支下，给code.txt增加一行文字，然后切换到master分支，同样在code.txt上增加一行文字。此时如果在master上合并dev，就会出现冲突： 

		git用<<<<<<<，=======，>>>>>>>标记出不同分支中冲突的内容，我们修改如下后保存 

		保存完后提交到暂存区和仓库区，完成最终的合并 


		注;示例:
		 	  6 <<<<<<< HEAD
			  7 王子去lol！
			  8 =======
			  9 王子去洗脚了！
			 10 >>>>>>> master

		 1.冲突产生的原因:两个分支同时对同一个文件都做了修改,然后合并!

		 2.解决方法:双方协商解决,保留代码中需要的部分,提交暂存区,然后在提交到仓库区!
		 		(注:在文件中要将<<<head ===>>>master去掉)

		 3.合并之后,主分支会保留所有的合并信息,被合并的只会保留他自己的信息!
		 
		 4.查看版本git log 之后;按q退出!		



	4.4分支合并策略
	
		1.通常，分支合并时，git会尽量才用fast forward模式，也就是“快进方式”，但不是所有合并都会采用这种模式，下面的场景就不会采用fast forward方式：
			1、切换到dev分支下，新建一个code3.txt，然后提交到仓库区，
			接着切回到master分支下，修改code.txt，新增一行文字，
			也提交到仓库区，此时，在master分支上合并dev分支，git不会
			直接按照移动指针的方式来完成合并，此时会出现如下界面：

		编辑提交信息，按下ctrl+x,然后按y回车退出，这个时候就完成了合并，可以看到
		文字提示显示的不是fast forward方式合并


		2.修改不同分支的不同文件的时候,合并的时候是递归方式合并 'recursive'

***********************************未完成!OK了

		1.git merge dev (fast forward方式合并)
		 合并如下: (--graph方式查看)
		* 2bf9b7ed512958a39f341224151e0186e5803a55 版本十二


		2.git merge --no-off -m '合并dev到master' dev
			强制不用fast forward方式合并!那么此时就是使用递归方式合并!

		运行结果:....'recursive'...	


		3.此时可以使用带图形的方式查看版本，使用命令如下：
				git log --graph --pretty=oneline

		显示如下:
			*   efc196290069ca7906bee237fab9cb34c0184cf3 禁用fastforward合并
			|\  
			| * bc4be94eecd1da9664f52893023c077bb4dc4ce1 版本十一
			* | de7b66666df02c8b5a7eed8b74f68802926ad9b5 版本十一
			|/  
					
合并总结: 
		1.如果是不同分支同时修改了相同的文件,或者一个修改一个不修改(以code.txt,code2.txt为例),
			那么git merge dev 会尽量采用以fast forward方式合并,
		2.如果不同分支修改了不同文件code和code2,那么git merge dev
			合并方式是 递归(recursive)合并	
		3.无论是不是修改了相同文件,都可以使用强制递归方式合并	
			git merge --no-off -m '合并dev到master' dev
		4.递归和快进方式的区别是,递归可以添加一条修改信息进仓库区,有记录,而且递归合并的界面不一样!
			但是快进方式合并的时候很快速,没有界面,而且会删除分支合并信息,根本看不出来是合并了!	
		5.无论哪种方式合并,主分支会保留所有的合并信息,被合并的分支还是不变!

------------------------------------------------------------

	4.5bug跟分支
		过程:
		1):将工作区还不想提及的工作暂存起来:git stash
		 (git stash将工作区的未完成的修改内容暂存在工作区,此时git status会是干净的工作区)
		2):创建一个bug分支,git branch bug001,在此分支上修改bug,然后提交缓存区,再提交仓库区就可以了
		3):然后切换到dev分支,使用 recursive方式合并bug001分支,删除bug001分支
		4):查看分支情况


		git branch bug001
		git checkout bug001

		ls
		vi code2.txt(写点东西)
		git add code2.txt
		git commit -m '解决bug'

		git checkout dev

		git merge --no-off -m '合并bug001分支到dev 分支上' bug001

		删掉bug分支
		git branch -d bug001

		# 查看分支情况
		git log --graph --pretty=oneline

	*** git stash list 查看所有暂存起来的工作!

		4、使用git stash list 查看stash状态，
		使用git stash pop可以将暂存在工作区的工作拿出出来，继续原来的工作。 


	注:1.实际开发中 commit操作不需要写 '版本1'这样的字眼,需要写做了什么!
		2.我觉得创建bug分支  跟 git stash 将未完成工作暂存是两种操作!



5.多人协作及远程仓库


	1.创建远程仓库
		1.登录GitHub
		2.创建新的仓库(一个仓库对应一个项目)
		3.名称,描述,忽略文件,MIT协议
		4.修改忽略文件.pyc  /.idea



	2.配置SSH公钥:
		1.在/home/python/目录下打开.gitconfig文件
		vi .gitconfig

		2.将email和name修改成自己的
		 [user]
		    email = cgboy2008@126.com
		    name = cgboy2008


		3.接着，删除~/.ssh目录，这里存储了旧的密钥
			rm -r .ssh    

		4.接下来，执行如下命令，生成自己的公钥和私钥文件
			ssh-keygen -t rsa -C "cgboy2008@126.com"	

		三次 回车 生成私钥和公钥
		
		5.复制公钥去GitHub网站 项目界面setting中添加公钥	
			cat id rsa.pub


	3.克隆项目
		1.将.ignore文件修改为:
			*.pyc
			.idea/
		2.克隆项目到本地pytest文件中	
			git clone git地址(注:要是ssh地址)

----------------------------------------
	git clone 没有执行成功的话,可能是秘钥没弄对,重新弄一下:
		extra:
		错误处理
		在连接远程仓库时候，可能会出现如下错误信息：

		sign_and_send_pubkey: signing failed: agent refused operation
		错误原因：在ssh账户中没有加入新生成的密钥 解决：逐条运行如下命令，将密码加入ssh账户

		eval "$(ssh-agent -s)"
		ssh-add

-------------------------------------------------


	4.创建分支及搭建项目框架

		4.1.创建分支:git branch dev
				git branch manager

		4.2将新建的分支推送到远程GitHub上面去:		
			git push origin dev	
			git push origin manager

			使用manager分支:
			git checkout branch manager

		4.3搭建项目框架:
			1.进虚拟环境:
				workon py3_django
			2.创建项目
				django-admin startproject ttsx
	

			4.配置引擎,建templates文件夹,	


			5.查看要提交的项目数据(终端)
				git add .
				git status

				git commit -m '创建ttsx的django项目'


				切换分支到dev
				git checkout dev

				合并manager分支
				git merge manager

				将dev分支推送到远程
				git push origin dev

				切换分支到master
				git checkout master

			6.合并分支:
				git merge dev

			7.推送到远程GitHub
				git push origin master	




	5.多人开发

		1.生成ssh公钥
			将自己的公钥给经理发过去,GitHub网站仓库ssh key可以添加多个公钥


		2.本地克隆
           git clone git@github.com:liujie646000730/frech.git


        3.新建分支:tom
        	git branch tom  

        4.用pycharm打开 tom中的 ttsx项目
        	在pycharm终端进入虚拟环境:workon py3_django


        5.创建应用app :goods
        		

        6.创建好之后git branch tom
        	切换到tom :
        	git checkout tom

        	git status

        	git add .
        	git commit -m '创建ttsx中应用goods'

        	git push origin tom



        7.将远程中的分支 同步到本地:(并且切换到dev分支)
        	git checkout -b dev origin/dev


        8.拉取远程代码过来
        	git pull origin dev


        ------------------------------------------
        初到公司,项目进度进行到了一半了:

        	1.git clone 经理GitHub地址
        	2.git branch jack
        	3.git push origin jack

        	4.假如tom的app是goods
        		jack的app是chart(购物车)

    		5.同样的 在原基础上进行操作,如果发现别人的项目没有完成,那么
    		不要管,只管知己的项目就ok

    		配置url ,创建app  :chart

    		6.设置完成 add .





	6.解决冲突

	多人协同开发时，避免不了会出现代码冲突的情况，冲突的原因一般是多人修改同一个文件，冲突会影响正常的开发进度，需要先解决再做后续开发。

		减少冲突的操作方式:
		1.养成良好的操作习惯，先pull再修改,修改完立即commit和push
		2.一定要确保自己正在修改的文件是最新版本的
		3.各自开发各自的模块
		4.如果要修改公共文件,一定要先确认有没有人正在修改
		5.下班前一定要提交代码,上班第一件事拉取最新代码
		6.一定不要擅自修改同事的代码



		1..假如tom代码由问题,要修改,修改之后推上去push
		要将tom的分支和jack的分支合并,
		那么要先pull把最新版本的jack的代码拉下来合并
		合并之后再push到远程,

		如果双方都修改过相同的地方,setting那么就会产生冲突,双方协商解决冲突,合并之后git add .
		git commit -m '解决冲突@setting'

		修改好了之后,再push到远程!


-------------------------------------------------------------
老师课堂笔记:

前言:1.在git_test文件夹下,全程用vi code.txt 来进行版本数据更新!
	2.在git_test文件夹下打开终端,就不用cd了
	3.运行vi code.txt :进入用i,退出用esc,然后英文下的 ':',然后 'x',保存退出


1、 git安装：
	sudo apt-get install git

2、 git操作基本命令：
	1) git接管文件夹，初始化：git init
	2) 查看当前状态：git status
	3) 提交文件到暂存区：git add <文件名>
	4) 将暂存区的记录提交仓库区：git commit -m <版本说明>

3、 版本查看和回退
	1) 查看当前版本：git log
	2) 回退到上一个版本：git reset --hard HEAD^ 或者是 git reset --hard HEAD~1
	3) 跳到任何创建过的版本：git reset --hard <版本号>
	4) 查看所有的版本号：git reflog

4、 git管理修改
	1) git只提交暂存区的修改，在工作区的修改，不会提交到仓库区
	2) 撤销工作区的修改：git checkout -- <文件名>
	3) 撤销暂存区的修改：
	   先执行：git reset HEAD <文件名> 将暂存区的修改放回到工作区
	   再执行：git checkout -- <文件名> 撤销工作区的修改
	4) 撤销提交到仓库区的修改：git reset --hard HEAD^

5、 git文件比较
	1) 比较工作区和版本库的区别：git diff HEAD -- <文件名>
	2) 查看两个版本的差异：git diff HEAD HEAD^

6、 文件删除
    1) 用git命令删除文件：git rm <文件名> , 删除的修改行为已经提交到暂存区，如果确认删除，需要提交仓库区
    2) 直接在文件夹删除文件，只是影响了工作区，需要提交暂存区，再提交到仓库区

7、 分支基本操作
	1) 查看分支列表：git branch
	2) 创建分支：git branch <分支名称>
	3) 切换分支：git checkout <分支名称>
	4) 创建及切换分支：git checkout -b <分支名称>

8、 分支的合并和删除
	graph 美 [ɡræf] 图表,曲线图


	1) 将其他分支合并到当前分支：git merge <分支名称>
	2) 删除分支：git branch -d <分支名称>
	3) 禁用fast-forward合并：git merge --no-ff -m '提交记录说明' <分支名称>
	4) 图形化界面查看所有版本 :
		git log --graph --pretty=oneline


	注:合并 merge <分支> 会将merge后面的这个						 分支里的内容拿过来到当前分支中!

9、 冲突：
	 产生原因：两个分支对同一个文件都做了修改，然后合并
	 解决方法：双方协商解决，保留代码中需要的部分，然后提交暂存区，再提交仓库区


10、工作区暂存及bug分支
		stash 美 [stæʃ] 隐藏,暂停

	1) 将工作区还不想提交的工作暂存起来：git stash
	2) 创建一个bug分支，git branch bug001 ,在此分支上修改bug，然后提交暂存区，再提交仓库区，
	3) 然后切换到dev分支，使用recursive方式合并bug001分支,删除bug001分支
	4) 查看工作区暂存的工作：git stash list
	5) 将工作区暂存的工作拿出了继续编辑：git stash pop



































































































































































