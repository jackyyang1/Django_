

day02



顺序表有缺陷: 如果扩容,那么就要找另一个块内存,那么原来的内存就变成零散的




1.链表

链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是不像顺序表
	一样连续存储数据，而是在每一个节点（数据存储单元）里存放下一个节点的位置信息（即地址）。



	1.1单向链表

		表元素域: elem用来存放具体的数据。
		链接域: next用来存放下一个节点的位置（python中的标识）
		变量p指向链表的头节点（首节点）的位置，从p出发能找到表中的任意节点。

		链表必须有一个首节点!

		Ctrl + shift + enter 自动添加冒号

		if 判断是否为空,保证代码的健壮性

		手写链表操作!

		在p节点后面插入s节点:
		s.next = p.next #p在左边 p.next 先执行,所以放在右边
		p.next = s


	1.2单向循环链表
		单向循环链表: 1.尾节点指向 头结点
					 2.如果只有一个节点,那就自己指向自己(如果不指向,那就不算循环链表)	


		注:1.单向循环链表,要注意长度,判断条件一定要为
			if cur.next is not self.__head:
			不然会陷入死循环			 

			2.删除头和删除尾 要注意判断是否为单个节点的循环链表



	1.3双向链表
		双向链表因为是 用了 '..',所以要判断是否为空
		其他的跟单链表一样的!
		cur.next.pre   要判断 cur.next 是否为空

		增,删的时候需要 维护一下 pre,遍历等操作不需要




2.栈
	class Stack(object):
		...


	以后使用的时候,可以直接定义一个 列表为栈
	 stack = []

	 当然,也可以用链表来实现 栈,但要从头开始

















































































































